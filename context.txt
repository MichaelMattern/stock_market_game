# Stock Market Game Documentation

## Overview
A real-time stock market trading game where users can trade stocks, manage their portfolio, and compete on a leaderboard. The system includes both user-facing and admin interfaces.

## API Endpoints

### User Endpoints

#### Authentication
- POST /accounts/authenticate
  - Request body: { "user_id": int, "password": string }
  - Response: { "user_id": int, "networth": float, "cash": float }
  - Description: Authenticates a user and returns their account information

#### Account Management
- GET /accounts/{user_id}
  - Response: { "user_id": int, "networth": float, "cash": float, "positions": [{ "symbol": string, "quantity": int, "avg_price": float }] }
  - Description: Retrieves detailed account information including positions

#### Trading
- POST /orders
  - Request body: { "user_id": int, "symbol": string, "side": "buy"|"sell", "type": "market"|"limit", "quantity": int, "price": float }
  - Response: { "order_id": int, "status": string }
  - Description: Places a new order

- GET /orders/{user_id}
  - Response: [{ "order_id": int, "symbol": string, "side": string, "type": string, "quantity": int, "price": float, "status": string }]
  - Description: Retrieves all orders for a user

- DELETE /orders/{order_id}
  - Response: { "status": "success" }
  - Description: Cancels an existing order

#### Market Data
- GET /stocks
  - Response: [{ "symbol": string, "price": float, "change": float, "volume": int }]
  - Description: Retrieves current market data for all stocks

- GET /stocks/{symbol}
  - Response: { "symbol": string, "price": float, "change": float, "volume": int }
  - Description: Retrieves current market data for a specific stock

#### Trade History
- GET /trades/{user_id}
  - Response: [{ "trade_id": int, "symbol": string, "side": string, "quantity": int, "price": float, "timestamp": string }]
  - Description: Retrieves trade history for a user

#### Leaderboard
- GET /leaderboard
  - Response: [{ "user_id": int, "networth": float, "trades_count": int }]
  - Description: Retrieves the current leaderboard rankings

### Admin Endpoints

#### Dashboard
- GET /admin/users
  - Response: [{ "user_id": int, "networth": float, "trades_count": int }]
  - Description: Retrieves all user accounts

- GET /admin/orders
  - Query params: symbol, user_id, side, type
  - Response: [{ "order_id": int, "user_id": int, "symbol": string, "side": string, "type": string, "quantity": int, "price": float, "status": string }]
  - Description: Retrieves all orders with optional filtering

- GET /admin/trades
  - Query params: symbol, user_id, side, limit
  - Response: [{ "trade_id": int, "user_id": int, "symbol": string, "side": string, "quantity": int, "price": float, "timestamp": string }]
  - Description: Retrieves all trades with optional filtering

- GET /admin/leaderboard
  - Response: [{ "user_id": int, "networth": float, "trades_count": int, "total_volume": int }]
  - Description: Retrieves detailed leaderboard data

## Database Schema

### Users Table
```sql
CREATE TABLE users (
    user_id INTEGER PRIMARY KEY,
    password_hash VARCHAR(255) NOT NULL,
    cash DECIMAL(15,2) DEFAULT 100000.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Orders Table
```sql
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    side VARCHAR(4) NOT NULL,
    type VARCHAR(5) NOT NULL,
    quantity INTEGER NOT NULL,
    price DECIMAL(15,2) NOT NULL,
    status VARCHAR(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

### Trades Table
```sql
CREATE TABLE trades (
    trade_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    side VARCHAR(4) NOT NULL,
    quantity INTEGER NOT NULL,
    price DECIMAL(15,2) NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

### Positions Table
```sql
CREATE TABLE positions (
    user_id INTEGER NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    quantity INTEGER NOT NULL,
    avg_price DECIMAL(15,2) NOT NULL,
    PRIMARY KEY (user_id, symbol),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
```

### Stocks Table
```sql
CREATE TABLE stocks (
    symbol VARCHAR(10) PRIMARY KEY,
    price DECIMAL(15,2) NOT NULL,
    change DECIMAL(15,2) NOT NULL,
    volume INTEGER NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## WebSocket Events

### Market Data Updates
- Event: "market_update"
- Data: { "symbol": string, "price": float, "change": float, "volume": int }
- Description: Real-time stock price updates

### Order Updates
- Event: "order_update"
- Data: { "order_id": int, "status": string }
- Description: Order status changes

### Trade Executions
- Event: "trade_execution"
- Data: { "trade_id": int, "user_id": int, "symbol": string, "side": string, "quantity": int, "price": float }
- Description: New trade executions

## Security

### Authentication
- All user endpoints require authentication
- Passwords are hashed using bcrypt
- Session management using JWT tokens

### Rate Limiting
- 100 requests per minute per IP
- 1000 requests per minute per authenticated user

### Input Validation
- All inputs are validated and sanitized
- SQL injection prevention using parameterized queries
- XSS prevention through proper escaping

## Error Handling

### HTTP Status Codes
- 200: Success
- 400: Bad Request
- 401: Unauthorized
- 403: Forbidden
- 404: Not Found
- 422: Unprocessable Entity
- 429: Too Many Requests
- 500: Internal Server Error

### Error Response Format
```json
{
    "error": "Error message",
    "detail": "Detailed error description",
    "code": "ERROR_CODE"
}
```

## Deployment

### Requirements
- Python 3.8+
- SQLite3
- Node.js 14+ (for WebSocket server)
- Redis (for rate limiting)

### Environment Variables
```
DATABASE_URL=sqlite:///stock_market.db
JWT_SECRET=your_jwt_secret
REDIS_URL=redis://localhost:6379
WS_PORT=8765
```

### Running the Application
1. Install dependencies: `pip install -r requirements.txt`
2. Initialize database: `python init_db.py`
3. Start the server: `python main.py`
4. Start WebSocket server: `node websocket_server.js`

## Monitoring and Logging

### Log Files
- app.log: Application logs
- access.log: HTTP access logs
- error.log: Error logs

### Metrics
- Request latency
- Error rates
- Active users
- Trading volume
- Order book depth

## Testing

### Unit Tests
- Run: `python -m pytest tests/`
- Coverage: `python -m pytest --cov=app tests/`

### Integration Tests
- Run: `python -m pytest tests/integration/`

### Load Testing
- Run: `locust -f locustfile.py`

## Contributing

### Code Style
- Follow PEP 8
- Use type hints
- Write docstrings for all functions
- Include unit tests for new features

### Pull Request Process
1. Create feature branch
2. Write tests
3. Implement changes
4. Update documentation
5. Submit PR

## License
MIT License - See LICENSE file for details 